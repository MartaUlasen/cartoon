{"version":3,"sources":["store/characterList/index.jsx","components/characterCard/index.jsx","components/characterList/index.jsx","store/character/index.jsx","components/character/index.jsx","components/app/index.jsx","store/characterList/sagas.jsx","store/character/sagas.jsx","store/saga.js","store/reducer.js","store/index.jsx","index.jsx"],"names":["initialState","loading","characters","undefined","next","error","characterListModule","createSlice","name","reducers","requestCharacterList","state","requestCharacterListSuccess","action","payload","results","info","requestCharacterListError","actions","reducer","CharacterCard","props","data","status","species","gender","image","location","url","path","split","filter","v","pop","statusClass","classNames","card__status","to","className","src","alt","mapDispatchToProps","connect","characterList","loaderRef","useRef","loadMoreCharacters","useCallback","entries","isIntersecting","useEffect","observerTarget","current","observer","IntersectionObserver","root","rootMargin","threshold","observe","unobserve","map","character","key","id","ref","size","characterModule","requestCharacter","requestCharacterSuccess","requestCharacterError","App","exact","component","CharacterList","render","match","params","fetchCharacterListWorker","fetchCharacterListWatcher","call","axios","get","result","put","toString","takeLeading","fetchCharacterWorker","fetchCharacterWatcher","takeLatest","rootSaga","all","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","store","configureStore","rootReducer","run","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.0c6ad19e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    characters: undefined,\r\n    next: 'https://rickandmortyapi.com/api/character',\r\n    error: undefined,\r\n};\r\n\r\nconst characterListModule = createSlice({\r\n    name: 'charactersList',\r\n    initialState,\r\n    reducers: {\r\n        requestCharacterList: (state) => {\r\n            state.loading = true;\r\n            state.error = undefined;\r\n        },\r\n        requestCharacterListSuccess: (state, action) => {\r\n            state.loading = false;\r\n            state.characters = state.characters === undefined\r\n                ? action.payload.results\r\n                : [...state.characters, ...action.payload.results];\r\n            state.next = action.payload.info.next;\r\n        },\r\n        requestCharacterListError: (state, action) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { actions, reducer } = characterListModule;\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport './index.scss';\r\n\r\nconst getHrefId = (href) => href.split('/').filter((v) => v).pop();\r\n\r\nconst CharacterCard = (props) => {\r\n    const {\r\n        data: {\r\n            name, status, species, gender, image, location, url,\r\n        },\r\n    } = props;\r\n    const path = `/characters/${getHrefId(url)}`;\r\n    const statusClass = classNames({\r\n        card__status: true,\r\n        'card__status--alive': status === 'Alive',\r\n        'card__status--dead': status === 'Dead',\r\n    });\r\n\r\n    return (\r\n        <Link to={path} className='card'>\r\n            <img className='card__img' src={image} alt={name} />\r\n            <div className='card__description'>\r\n                <h5 className='card__name'>{name}</h5>\r\n                <div className={statusClass}>{status}</div>\r\n                <div className='card__additional'>\r\n                    <div className='card__additional-title'>Species:</div>\r\n                    <div className='card__additional-value'>{species}</div>\r\n                </div>\r\n                <div className='card__additional'>\r\n                    <div className='card__additional-title'>Gender:</div>\r\n                    <div className='card__additional-value'>{gender}</div>\r\n                </div>\r\n                <div className='card__additional'>\r\n                    <div className='card__additional-title'>Location:</div>\r\n                    <div className='card__additional-value'>{location.name}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React, { useEffect, useRef, useCallback } from 'react';\r\nimport { actions } from 'store/characterList';\r\nimport { connect } from 'react-redux';\r\nimport CharacterCard from 'components/characterCard';\r\nimport { Loader } from 'react-feather';\r\n\r\nconst CharacterList = ({\r\n    loading,\r\n    error,\r\n    characters,\r\n    next,\r\n    requestCharacterList,\r\n}) => {\r\n    const loaderRef = useRef(null);\r\n\r\n    const loadMoreCharacters = useCallback((entries) => {\r\n        const target = entries[0];\r\n        if (target.isIntersecting && next) {\r\n            requestCharacterList(next);\r\n        }\r\n    }, [next, requestCharacterList]);\r\n\r\n    useEffect(() => {\r\n        const observerTarget = loaderRef.current;\r\n\r\n        const observer = new IntersectionObserver(loadMoreCharacters, {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.2,\r\n        });\r\n\r\n        if (loaderRef && observerTarget) {\r\n            observer.observe(observerTarget);\r\n        }\r\n\r\n        return () => observer.unobserve(observerTarget);\r\n    }, [loaderRef, loadMoreCharacters]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {characters?.map(\r\n                    (character) => <CharacterCard key={character.id} data={character} />)}\r\n                {error && <span>{error}</span>}\r\n            </div>\r\n            <div ref={loaderRef}>{loading && <Loader className='icon-loading' size={20} />}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ characterList }) => ({\r\n    loading: characterList.loading,\r\n    characters: characterList.characters,\r\n    next: characterList.next,\r\n    error: characterList.error,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    requestCharacterList: actions.requestCharacterList,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterList);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    data: undefined,\r\n    error: undefined,\r\n};\r\n\r\nconst characterModule = createSlice({\r\n    name: 'charactersList',\r\n    initialState,\r\n    reducers: {\r\n        requestCharacter: (state) => {\r\n            state.loading = true;\r\n            state.data = undefined;\r\n            state.error = undefined;\r\n        },\r\n        requestCharacterSuccess: (state, action) => {\r\n            state.loading = false;\r\n            state.data = action.payload;\r\n        },\r\n        requestCharacterError: (state, action) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { actions, reducer } = characterModule;\r\n\r\nexport default reducer;\r\n","import React, { useEffect } from 'react';\r\nimport { actions } from 'store/character';\r\nimport { connect } from 'react-redux';\r\nimport { Loader } from 'react-feather';\r\nimport './index.scss';\r\nimport classNames from 'classnames';\r\n\r\nconst Character = (props) => {\r\n    const {\r\n        loading,\r\n        error,\r\n        requestCharacter,\r\n        id,\r\n        data: {\r\n            status, image, name, species, gender, location,\r\n        } = {},\r\n    } = props;\r\n    const statusClass = classNames({\r\n        card__status: true,\r\n        'card__status--alive': status === 'Alive',\r\n        'card__status--dead': status === 'Dead',\r\n    });\r\n\r\n    useEffect(() => {\r\n        requestCharacter(`https://rickandmortyapi.com/api/character/${id}`);\r\n    }, [requestCharacter, id]);\r\n\r\n    return (\r\n        <>\r\n            {error && <span>{error}</span>}\r\n            {loading\r\n                ? <Loader className='icon-loading' size={20} />\r\n                : (\r\n                    <div className='character'>\r\n                        <img className='card__img' src={image} alt={name} />\r\n                        <div className='card__description'>\r\n                            <h5 className='card__name'>{name}</h5>\r\n                            <div className={statusClass}>{status}</div>\r\n                            <div className='card__additional'>\r\n                                <div className='card__additional-title'>Species:</div>\r\n                                <div className='card__additional-value'>{species}</div>\r\n                            </div>\r\n                            <div className='card__additional'>\r\n                                <div className='card__additional-title'>Gender:</div>\r\n                                <div className='card__additional-value'>{gender}</div>\r\n                            </div>\r\n                            <div className='card__additional'>\r\n                                <div className='card__additional-title'>Location:</div>\r\n                                <div className='card__additional-value'>{location?.name}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ character }) => ({\r\n    data: character.data,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    requestCharacter: actions.requestCharacter,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Character);\r\n","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport CharacterList from 'components/characterList';\r\nimport Character from 'components/character';\r\nimport './index.scss';\r\n\r\nconst App = () => (\r\n    <div className='app'>\r\n        <header className='header'>\r\n            <Link to='/' className='logo'>The Rick and Morty</Link>\r\n        </header>\r\n        <main className='main'>\r\n            <Switch>\r\n                <Route exact path='/' component={CharacterList} />\r\n                <Route exact path='/characters/:id' render={({ match: { params: { id } } }) => <Character id={id} />} />\r\n            </Switch>\r\n        </main>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import {\r\n    put, call, takeLeading,\r\n} from 'redux-saga/effects';\r\nimport { actions } from 'store/characterList';\r\nimport axios from 'axios';\r\n\r\nexport function* fetchCharacterListWorker({ payload }) {\r\n    try {\r\n        const result = yield call(() => axios.get(payload));\r\n        yield put(actions.requestCharacterListSuccess(result.data));\r\n    }\r\n    catch (e) {\r\n        yield put(actions.requestCharacterListError(e.toString()));\r\n    }\r\n}\r\n\r\nexport function* fetchCharacterListWatcher() {\r\n    yield takeLeading(actions.requestCharacterList.toString(), fetchCharacterListWorker);\r\n}\r\n","import {\r\n    put, call, takeLatest,\r\n} from 'redux-saga/effects';\r\nimport { actions } from 'store/character';\r\nimport axios from 'axios';\r\n\r\nexport function* fetchCharacterWorker({ payload }) {\r\n    try {\r\n        const result = yield call(() => axios.get(payload));\r\n        yield put(actions.requestCharacterSuccess(result.data));\r\n    }\r\n    catch (e) {\r\n        yield put(actions.requestCharacterError(e.toString()));\r\n    }\r\n}\r\n\r\nexport function* fetchCharacterWatcher() {\r\n    yield takeLatest(actions.requestCharacter.toString(), fetchCharacterWorker);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { fetchCharacterListWatcher } from './characterList/sagas';\r\nimport { fetchCharacterWatcher } from './character/sagas';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fetchCharacterListWatcher(),\r\n        fetchCharacterWatcher(),\r\n    ]);\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport characterList from './characterList';\r\nimport character from './character';\r\n\r\nexport default combineReducers({\r\n    characterList,\r\n    character,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './saga';\r\nimport rootReducer from './reducer';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [...getDefaultMiddleware(), sagaMiddleware];\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware,\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from 'components/app';\r\nimport store from 'store';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter basename='/cartoon'>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}